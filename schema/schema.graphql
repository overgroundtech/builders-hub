scalar Upload
scalar GenericScalar


type Query {
    product(productId: Int!): Product
    products: [Product]!
    similarProducts(productId: Int): [Product]
    category(categoryId: Int!): Category
    categoryProducts: [CategoryProducts]!
    cart(cartId: String!): Cart
    order(orderId: Int): Order
    orders: [Order]
    userOrders(userId: Int): [Order]
    users: [User]
    me: User
}

type Mutation {
    createUser(username: String! password: String password1: String email: String): createUserPayload
    search(key: String!): SearchResults
    verifyToken(token: String!): VerifyToken
    refreshToken(token: String!): RefreshToken
    tokenAuth(username: String! password:String!): TokenAuth
    createCategory(name: String! image: Upload): createCategoryPayload!
    uploadProductImage(productId: Int! image: Upload!): uploadProductImagePayload!
    createProduct(
        name: String!
        categoryId: Int!
        price: Float!
        offer: Boolean!
        discount: Float!
        inStock: Int!
        description: String!
    ): createProductPayload!
    """
    cart mutations
    """
    addItem(
        cartId: String!
        productId: Int!
        quantity: Int!
    ): cartMutationPayload
    removeItem(cartId: String! productId: Int!): cartMutationPayload
    updateItem(
        cartId: String!
        productId: Int!
        quantity: Int!
    ): cartMutationPayload
    createOrder(customerId: Int! cartId: String!): orderPayload
    updateOrder(
        orderId: Boolean
        paid: Boolean
        payment: String
        status: String
    ): orderPayload
}

type Category {
    id: Int
    name: String
    image: String
}

type Product {
    id: Int
    name: String
    categoryId: Int
    price: Float
    offer: Boolean
    discount: Float
    inStock: Int
    createdAt: String
    images: [String]
    description: String!
}

type Cart {
    items: [Item]!
    summary: Float
    count: Int!
}

type Item {
    product: Product
    unitPrice: Float
    quantity: Int
    total: Float
}

type SearchResults {
    results: [Product]
}

type Order {
    customer: User
    paid: Boolean
    payment: String
    status: String
    madeOn: String
}


type CategoryProducts {
    category: Category
    products: [Product]
}

type User {
    id: Int
    username: String
    email: String
}

type createUserPayload {
    success: Boolean
    user: User
}

type VerifyToken {
    payload: GenericScalar
}
type RefreshToken {
    token: String
    refresh_token: String
    payload: GenericScalar
}
type TokenAuth {
    token: String
    refresh_token: String
    payload: GenericScalar
}

extend type TokenAuth {
    user: User
}


type RevokeToken {
    revoked: Int
}

type createProductPayload {
    success: Boolean
}

type createCategoryPayload {
    success: Boolean
}

type uploadProductImagePayload{
    success: Boolean
}

type cartMutationPayload {
    success: Boolean
    cart: Cart
}


type orderPayload {
    success: Boolean
}